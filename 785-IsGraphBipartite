// Last updated: 8/21/2025, 11:52:03 PM
class Solution {
public:
    bool dfs(int index, int c, vector<vector<int>>& graph, vector<int>& color){
        color[index]=c;
        int s=graph[index].size();
        for(int i=0;i<s;i++){
            int neigh=graph[index][i];
            if(color[neigh]==-1){
                if(!dfs(neigh, !c, graph, color)) return false;
            }
            else if(color[neigh]==c){
                return false;
            }
        }
        return true;
    }
    bool isBipartite(vector<vector<int>>& graph) {
        int nodes=graph.size();
        vector<int> color(nodes,-1);
        for(int i=0;i<nodes;i++){
            if(color[i]==-1){
                if(dfs(i,0,graph,color)==false) return false;
            }
        }
        return true;
    }
};